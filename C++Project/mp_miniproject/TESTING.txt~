(1) Run ./numerics < testcases/input1.txt
    You will see that it prints
    Expected a legal instruction, but found defined
    , which is correct because [the first instruction is wrong]
(2) Run ./numerics < testcases/input2.txt
    You will see that it prints
    Invalid id: x
    , which is correct because [it defines two parameters with the same name]
(3) Run ./numerics < testcases/input3.txt
    You will see that it prints
    Parameter undefined
    , which is correct because [We use undefined parameter in the rhs of define]
(4) Run ./numerics < testcases/input4.txt
    You will see that it prints
    Didn't find equal sign
    , which is correct because [We didn't use equal sign in the middle]
(5) Run ./numerics < testcases/input5.txt
    You will see that it prints
    Parameter undefined
    , which is correct because [We didn't define z in lhs]
(6) Run ./numerics < testcases/input6.txt
    You will see that it prints
    Expected ) but found y)
    Jibber jabber at the end
    , which is correct because [sqrt could only take one parameter, but here we give it two]
(7) Run ./numerics < testcases/input7.txt
    You will see that it prints
    Parameter undefined
    , which is correct because [pow takes two paras, after read x, it considers ')' as the second para, and found no match for that name]
(8) Run ./numerics < testcases/input8.txt
    You will see that it prints
    Function undefined: g
    , which is correct because [We use the undefined function name to define a function]
(9) Run ./numerics < testcases/input9.txt
    You will see that it prints
    define f(x y) Same function name
    , which is correct because [We redefine the same function]
(10) Run ./numerics < testcases/input10.txt
     You will see that it prints
     Same function name
     , which is correct because [We try to redefine the defined function +]
(11) Run ./numerics < testcases/input11.txt
     You will see that it prints
     End of line found mid expression!
     Could not parse expression, please try again
     , which is correct because [the expression lacks the rhs]
(12) Run ./numerics < testcases/input12.txt
     You will see that it prints
     No function name or parameter
     , which is correct because [We don't input any paras]
(13) Run ./numerics < testcases/input13.txt
     You will see that it prints
     Invalid op: f93u
     , which is correct because [The function name should only consists of letters]
(14) Run ./numerics < testcases/input14.txt
     You will see that it prints
     Invalid id: x0
     , which is correct because [The paras names should only consist of letters]
(15) Run ./numerics < testcases/input15.txt
     You will see that it prints
     Function undefined: f
     , which is correct because [We have not defined before test it]
(16) Run ./numerics < testcases/input16.txt
     You will see that it prints
     End of line found mid expression!
     , which is correct because [We have not enter the second input value yet]
(17) Run ./numerics < testcases/input17.txt
     You will see that it prints
     defined f(x y)
     Jibber jabber at the end
     , which is correct because [The test command only takes to expressions, but we give three]
(18) Run ./numerics < testcases/input18.txt
     You will see that it prints
     defined f(x y)
     The parameter :x is not a double number
     , which is correct because [The paras in test need to be double type]
(19) Run ./numerics < testcases/input19.txt
     You will see that it prints
     defined f(x y) More nums than expected!
     , which is correct because [We define 2 paras in f define, but we give 3 in f test]
(20) Run ./numerics < testcases/input20.txt
     You will see that it prints
     defined f(x y) Less nums than expected!
     , which is correct because [We define 2 paras in f define, but we give 1 in f test]
(21) Run ./numerics < testcases/input21.txt
     You will see that it prints
     defined f(x y) No parameter
     , which is correct because [We have not enter any input paras in first expression of test]
(22) Run ./numerics < testcases/input22.txt
     You will see that it prints
     The result: a is not a double number
     , which is correct because [The expression should be a number constant or function expression, but we give letters]
(23) Run ./numerics < testcases/input23.txt
     You will see that it prints
     , which is correct because [We use # to enter comments, which should not be printed out]
(24) Run ./numerics < testcases/input24.txt
     You will see that it prints
     defined f(x y)
     f(5 -2.5) = -13 [INCORRECT: expected -14.5]
     f(5 2.5) = 14.5 [correct]
     14.5 = 14.5 [correct]
     14.5 = 14.5 [correct]
     , which is correct because [we test the nested '()' in define and negative and float number in test, and function expression or number constant in test]
(25) Run ./numerics < testcases/input25.txt
     You will see that it prints
     defined f(x y)
     defined g(x y)
     defined h(x y z)
     h(1 2 3) = 5 [INCORRECT: expected 30]
     h(2.7 g(3.5 -9.06) f(7 g(0.9 2.3))) = 0 [INCORRECT: expected 65.9104]
     , which is correct because [We test the recursive use of user-defined function and nested function in test]
(26) Run ./numerics < testcases/input26.txt
     You will see that it prints
     +(2 3) = 5 [correct]
     +(2 3) = -2 [INCORRECT: expected 5]
     9 = 9 [correct]
     9 = 9 [correct]
     9 = 9.00001 [INCORRECT: expected 9]
     *(sqrt(2) sqrt(2)) = 2 [correct]
     defined f(x y z)
     f(2 3 4) = 10 [correct]
     defined g(x yz)
     g(0.8 -109) = 1.41421 [INCORRECT: expected -108.2]
     , which is correct because [We test build-in functions, constant number vs constant number, and closeness of the definition of equal, and many blanks between paras, and para name alias, and the result is correct]
(27) Run ./numerics < testcases/input27.txt
     You will see that it prints
     defined f(x y z)
     f(2.1 3.2 8) = 0 [INCORRECT: expected 3.23762]
     defined g(x y)
     g(7.2 -3.5) = 0.2 [correct]
     , which is correct because [We test this to prove the other build in functions can work, and the pound sign can omit the words after it]
(28) Run ./numerics < testcases/input28.txt
     You will see that it prints
     defined f(x y)
     Integral result: 8.997
     , which is correct because [The example result is correct]
(29) Run ./numerics < testcases/input29.txt
     You will see that it prints
     defined f(x)
     Function name undefined.
     , which is correct because [We don't define g function, but use it in numint]
(30) Run ./numerics < testcases/input30.txt
     You will see that it prints
     defined f(x)
     Wrong Input
     Wrong Input of step or less range number or invalid range number
     , which is correct because [the step number could only be number, but we use letter here]
(31) Run ./numerics < testcases/input31.txt
     You will see that it prints
     defined f(x)
     Invalid step num
     , which is correct because [the step num should be positive, but here we give negative]
(32) Run ./numerics < testcases/input32.txt
     You will see that it prints
     defined f(x y)
     Wrong Input
     Wrong Input of step or less range number or invalid range number
     , which is correct because [The function f needs 2 paras, but we only give 1]
(33) Run ./numerics < testcases/input33.txt
     You will see that it prints
     defined f(x y)
     Wrong num of pairs of range nums.
     , which is correct because [The function f have two paras, which need 4 nums to describe the range, but we give 6]
(34) Run ./numerics < testcases/input34.txt
     You will see that it prints
     defined f(x)
     Wrong Input of step or less range number or invalid range number
     , which is correct because [the range numbers pair should be sorted from low to high, but we give high range first and low range second]
(35) Run ./numerics < testcases/input35.txt
     You will see that it prints
     defined f(x)
     Invalid step num
     , which is correct because [The step number is too big, it should satisfy the relation that low+step<=high]
(36) Run ./numerics < testcases/input36.txt
     You will see that it prints
     defined f(x)
     Integral result: 0.995
     , which is correct because [We test the one paras integral and pound sign after numint instruction, and result is correct]
(37) Run ./numerics < testcases/input37.txt
     You will see that it prints
     defined f(x y)
     Integral result: 9.01366
     , which is correct because [we test the mcint normal result with pound sign]
(38) Run ./numerics < testcases/input38.txt
     You will see that it prints
     defined f(x y)
     Function name undefined
     , which is correct because [we use function g in mcint but g is undefined]
(39) Run ./numerics < testcases/input39.txt
     You will see that it prints
     defined f(x y)
     Invalid num of random points
     , which is correct because [the num of random points must be positive integer, but we give a float]
(40) Run ./numerics < testcases/input40.txt
     You will see that it prints
     defined f(x y)
     Invalid num of random points
     , which is correct because [the num of random points must be positive integer, but we give a negative int]
(41) Run ./numerics < testcases/input41.txt
     You will see that it prints
     defined f(x y)
     Wrong Input
     Wrong Input of step or less range number or invalid range number
     , which is correct because [the num of random points or range number must be double, but we give letter]
(42) Run ./numerics < testcases/input42.txt
     You will see that it prints
     defined f(x y)
     Wrong Input
     Wrong Input of step or less range number or invalid range number
     , which is correct because [the function f have 2 paras, need 4 range nums, but we only give 3]
(43) Run ./numerics < testcases/input43.txt
     You will see that it prints
     defined f(x y)
     Wrong num of pairs of range nums
     , which is correct because [The function f have 2 paras, need two pairs of range nums, but we give 3 pairs]
(44) Run ./numerics < testcases/input44.txt
     You will see that it prints
     defined f(x y)
     Wrong Input of step or less range number or invalid range number
     , which is correct because [The range numbers should statisfy that low<high, but we give high<low]
(45) Run ./numerics < testcases/input45.txt
     You will see that it prints
     defined f(x)
     Integral result: 0.994256
     , which is correct because [We test this case to verify the code can work when we only give one parameter]
(46) Run ./numerics < testcases/input46.txt
     You will see that it prints
     defined f(x)
     Max value: 6.34676e+17
     Min value: 0.236434
     defined g(x)
     Max value: 4
     Min value: 2
     defined h(x)
     Max value: 11.6443
     Min value: -7.7026
     , which is correct because [We test the gradient function with min and max, and the result is reasonable]
(47) Run ./numerics < testcases/input47.txt
     You will see that it prints
     defined f(x)
     Function name undefined
     , which is correct because [the function g we use is undefined]
(48) Run ./numerics < testcases/input48.txt
     You will see that it prints
     defined f(x)
     Wrong Input
     Invalid input of min max
     , which is correct because [the gamma has to be a double number, but here we give a letter]
(49) Run ./numerics < testcases/input49.txt
     You will see that it prints
     defined f(x)
     Wrong Input
     Invalid input of min max
     , which is correct because [the distance value should be a non-negative double value, but we give a letter]
(50) Run ./numerics < testcases/input50.txt
     You will see that it prints
     defined f(x)
     Invalid input of converged distance
     , which is correct because [the distance value should be a non-negative double value, but we give a negative value]
(51) Run ./numerics < testcases/input51.txt
     You will see that it prints
     defined f(x)
     Wrong Input
     Invalid input of min max
     , which is correct because [the start point should be a double value, but we give a letter]
(52) Run ./numerics < testcases/input52.txt
     You will see that it prints
     defined f(x y)
     Wrong Input
     Invalid input of min max
     , which is correct because [The function f takes two paras, we only offer one, so it took the value for the max step num to be the second para, and no value for max step num]
(53) Run ./numerics < testcases/input53.txt
     You will see that it prints
     defined f(x)
     Jibber jabber at the end
     , which is correct because [the function f only took one paras, but we prepare to offer two, so it took the second para that we offer as the max step num, and the left was seen as jibber jabber]
(54) Run ./numerics < testcases/input54.txt
     You will see that it prints
     defined f(x)
     Wrong Input
     Invalid input of min max
     , which is correct because [the max step num should be positive integer, but we give letter]
(55) Run ./numerics < testcases/input55.txt
     You will see that it prints
     defined f(x)
     Invalid max step number.
     , which is correct because [the max step num should be positive integer, but we give float]
(56) Run ./numerics < testcases/input56.txt
     You will see that it prints
     defined f(x)
     Invalid max step number
     , which is correct because [the max step num should be positive integer, but give negative integer]
(57) Run ./numerics < testcases/input57.txt
     You will see that it prints , which is correct because [reasons]
(58) Run ./numerics < testcases/input12.txt
     You will see that it prints , which is correct because [reasons]
(59) Run ./numerics < testcases/input12.txt
     You will see that it prints , which is correct because [reasons]
(60) Run ./numerics < testcases/input12.txt
     You will see that it prints , which is correct because [reasons]
(61) Run ./numerics < testcases/input12.txt
     You will see that it prints , which is correct because [reasons]
(62) Run ./numerics < testcases/input12.txt
     You will see that it prints , which is correct because [reasons]

    
